/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AwsDataService } from "../awsData.service";
import { AwsDataCreateInput } from "./AwsDataCreateInput";
import { AwsData } from "./AwsData";
import { AwsDataFindManyArgs } from "./AwsDataFindManyArgs";
import { AwsDataWhereUniqueInput } from "./AwsDataWhereUniqueInput";
import { AwsDataUpdateInput } from "./AwsDataUpdateInput";

export class AwsDataControllerBase {
  constructor(protected readonly service: AwsDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AwsData })
  async createAwsData(
    @common.Body() data: AwsDataCreateInput
  ): Promise<AwsData> {
    return await this.service.createAwsData({
      data: data,
      select: {
        backupName: true,
        createdAt: true,
        id: true,
        lastModifiedTime: true,
        lastRunTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AwsData] })
  @ApiNestedQuery(AwsDataFindManyArgs)
  async awsDataItems(@common.Req() request: Request): Promise<AwsData[]> {
    const args = plainToClass(AwsDataFindManyArgs, request.query);
    return this.service.awsDataItems({
      ...args,
      select: {
        backupName: true,
        createdAt: true,
        id: true,
        lastModifiedTime: true,
        lastRunTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AwsData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async awsData(
    @common.Param() params: AwsDataWhereUniqueInput
  ): Promise<AwsData | null> {
    const result = await this.service.awsData({
      where: params,
      select: {
        backupName: true,
        createdAt: true,
        id: true,
        lastModifiedTime: true,
        lastRunTime: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AwsData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAwsData(
    @common.Param() params: AwsDataWhereUniqueInput,
    @common.Body() data: AwsDataUpdateInput
  ): Promise<AwsData | null> {
    try {
      return await this.service.updateAwsData({
        where: params,
        data: data,
        select: {
          backupName: true,
          createdAt: true,
          id: true,
          lastModifiedTime: true,
          lastRunTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AwsData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAwsData(
    @common.Param() params: AwsDataWhereUniqueInput
  ): Promise<AwsData | null> {
    try {
      return await this.service.deleteAwsData({
        where: params,
        select: {
          backupName: true,
          createdAt: true,
          id: true,
          lastModifiedTime: true,
          lastRunTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
