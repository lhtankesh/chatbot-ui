/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AwsData } from "./AwsData";
import { AwsDataCountArgs } from "./AwsDataCountArgs";
import { AwsDataFindManyArgs } from "./AwsDataFindManyArgs";
import { AwsDataFindUniqueArgs } from "./AwsDataFindUniqueArgs";
import { CreateAwsDataArgs } from "./CreateAwsDataArgs";
import { UpdateAwsDataArgs } from "./UpdateAwsDataArgs";
import { DeleteAwsDataArgs } from "./DeleteAwsDataArgs";
import { AwsDataService } from "../awsData.service";
@graphql.Resolver(() => AwsData)
export class AwsDataResolverBase {
  constructor(protected readonly service: AwsDataService) {}

  async _awsDataItemsMeta(
    @graphql.Args() args: AwsDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AwsData])
  async awsDataItems(
    @graphql.Args() args: AwsDataFindManyArgs
  ): Promise<AwsData[]> {
    return this.service.awsDataItems(args);
  }

  @graphql.Query(() => AwsData, { nullable: true })
  async awsData(
    @graphql.Args() args: AwsDataFindUniqueArgs
  ): Promise<AwsData | null> {
    const result = await this.service.awsData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AwsData)
  async createAwsData(
    @graphql.Args() args: CreateAwsDataArgs
  ): Promise<AwsData> {
    return await this.service.createAwsData({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AwsData)
  async updateAwsData(
    @graphql.Args() args: UpdateAwsDataArgs
  ): Promise<AwsData | null> {
    try {
      return await this.service.updateAwsData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AwsData)
  async deleteAwsData(
    @graphql.Args() args: DeleteAwsDataArgs
  ): Promise<AwsData | null> {
    try {
      return await this.service.deleteAwsData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
