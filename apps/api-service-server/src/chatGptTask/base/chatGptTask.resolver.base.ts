/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ChatGptTask } from "./ChatGptTask";
import { ChatGptTaskCountArgs } from "./ChatGptTaskCountArgs";
import { ChatGptTaskFindManyArgs } from "./ChatGptTaskFindManyArgs";
import { ChatGptTaskFindUniqueArgs } from "./ChatGptTaskFindUniqueArgs";
import { CreateChatGptTaskArgs } from "./CreateChatGptTaskArgs";
import { UpdateChatGptTaskArgs } from "./UpdateChatGptTaskArgs";
import { DeleteChatGptTaskArgs } from "./DeleteChatGptTaskArgs";
import { ChatGptTaskService } from "../chatGptTask.service";
@graphql.Resolver(() => ChatGptTask)
export class ChatGptTaskResolverBase {
  constructor(protected readonly service: ChatGptTaskService) {}

  async _chatGptTasksMeta(
    @graphql.Args() args: ChatGptTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ChatGptTask])
  async chatGptTasks(
    @graphql.Args() args: ChatGptTaskFindManyArgs
  ): Promise<ChatGptTask[]> {
    return this.service.chatGptTasks(args);
  }

  @graphql.Query(() => ChatGptTask, { nullable: true })
  async chatGptTask(
    @graphql.Args() args: ChatGptTaskFindUniqueArgs
  ): Promise<ChatGptTask | null> {
    const result = await this.service.chatGptTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ChatGptTask)
  async createChatGptTask(
    @graphql.Args() args: CreateChatGptTaskArgs
  ): Promise<ChatGptTask> {
    return await this.service.createChatGptTask({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ChatGptTask)
  async updateChatGptTask(
    @graphql.Args() args: UpdateChatGptTaskArgs
  ): Promise<ChatGptTask | null> {
    try {
      return await this.service.updateChatGptTask({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChatGptTask)
  async deleteChatGptTask(
    @graphql.Args() args: DeleteChatGptTaskArgs
  ): Promise<ChatGptTask | null> {
    try {
      return await this.service.deleteChatGptTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
