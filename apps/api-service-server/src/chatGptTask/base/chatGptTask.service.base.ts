/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ChatGptTask as PrismaChatGptTask } from "@prisma/client";

export class ChatGptTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChatGptTaskCountArgs, "select">
  ): Promise<number> {
    return this.prisma.chatGptTask.count(args);
  }

  async chatGptTasks<T extends Prisma.ChatGptTaskFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatGptTaskFindManyArgs>
  ): Promise<PrismaChatGptTask[]> {
    return this.prisma.chatGptTask.findMany<Prisma.ChatGptTaskFindManyArgs>(
      args
    );
  }
  async chatGptTask<T extends Prisma.ChatGptTaskFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatGptTaskFindUniqueArgs>
  ): Promise<PrismaChatGptTask | null> {
    return this.prisma.chatGptTask.findUnique(args);
  }
  async createChatGptTask<T extends Prisma.ChatGptTaskCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatGptTaskCreateArgs>
  ): Promise<PrismaChatGptTask> {
    return this.prisma.chatGptTask.create<T>(args);
  }
  async updateChatGptTask<T extends Prisma.ChatGptTaskUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatGptTaskUpdateArgs>
  ): Promise<PrismaChatGptTask> {
    return this.prisma.chatGptTask.update<T>(args);
  }
  async deleteChatGptTask<T extends Prisma.ChatGptTaskDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatGptTaskDeleteArgs>
  ): Promise<PrismaChatGptTask> {
    return this.prisma.chatGptTask.delete(args);
  }
}
