/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChatGptTaskService } from "../chatGptTask.service";
import { ChatGptTaskCreateInput } from "./ChatGptTaskCreateInput";
import { ChatGptTask } from "./ChatGptTask";
import { ChatGptTaskFindManyArgs } from "./ChatGptTaskFindManyArgs";
import { ChatGptTaskWhereUniqueInput } from "./ChatGptTaskWhereUniqueInput";
import { ChatGptTaskUpdateInput } from "./ChatGptTaskUpdateInput";

export class ChatGptTaskControllerBase {
  constructor(protected readonly service: ChatGptTaskService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChatGptTask })
  async createChatGptTask(
    @common.Body() data: ChatGptTaskCreateInput
  ): Promise<ChatGptTask> {
    return await this.service.createChatGptTask({
      data: data,
      select: {
        createdAt: true,
        id: true,
        maxTokens: true,
        model: true,
        prompt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChatGptTask] })
  @ApiNestedQuery(ChatGptTaskFindManyArgs)
  async chatGptTasks(@common.Req() request: Request): Promise<ChatGptTask[]> {
    const args = plainToClass(ChatGptTaskFindManyArgs, request.query);
    return this.service.chatGptTasks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        maxTokens: true,
        model: true,
        prompt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChatGptTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async chatGptTask(
    @common.Param() params: ChatGptTaskWhereUniqueInput
  ): Promise<ChatGptTask | null> {
    const result = await this.service.chatGptTask({
      where: params,
      select: {
        createdAt: true,
        id: true,
        maxTokens: true,
        model: true,
        prompt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChatGptTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChatGptTask(
    @common.Param() params: ChatGptTaskWhereUniqueInput,
    @common.Body() data: ChatGptTaskUpdateInput
  ): Promise<ChatGptTask | null> {
    try {
      return await this.service.updateChatGptTask({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          maxTokens: true,
          model: true,
          prompt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChatGptTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChatGptTask(
    @common.Param() params: ChatGptTaskWhereUniqueInput
  ): Promise<ChatGptTask | null> {
    try {
      return await this.service.deleteChatGptTask({
        where: params,
        select: {
          createdAt: true,
          id: true,
          maxTokens: true,
          model: true,
          prompt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
