/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WebhookTrigger } from "./WebhookTrigger";
import { WebhookTriggerCountArgs } from "./WebhookTriggerCountArgs";
import { WebhookTriggerFindManyArgs } from "./WebhookTriggerFindManyArgs";
import { WebhookTriggerFindUniqueArgs } from "./WebhookTriggerFindUniqueArgs";
import { CreateWebhookTriggerArgs } from "./CreateWebhookTriggerArgs";
import { UpdateWebhookTriggerArgs } from "./UpdateWebhookTriggerArgs";
import { DeleteWebhookTriggerArgs } from "./DeleteWebhookTriggerArgs";
import { WebhookTriggerService } from "../webhookTrigger.service";
@graphql.Resolver(() => WebhookTrigger)
export class WebhookTriggerResolverBase {
  constructor(protected readonly service: WebhookTriggerService) {}

  async _webhookTriggersMeta(
    @graphql.Args() args: WebhookTriggerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WebhookTrigger])
  async webhookTriggers(
    @graphql.Args() args: WebhookTriggerFindManyArgs
  ): Promise<WebhookTrigger[]> {
    return this.service.webhookTriggers(args);
  }

  @graphql.Query(() => WebhookTrigger, { nullable: true })
  async webhookTrigger(
    @graphql.Args() args: WebhookTriggerFindUniqueArgs
  ): Promise<WebhookTrigger | null> {
    const result = await this.service.webhookTrigger(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WebhookTrigger)
  async createWebhookTrigger(
    @graphql.Args() args: CreateWebhookTriggerArgs
  ): Promise<WebhookTrigger> {
    return await this.service.createWebhookTrigger({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => WebhookTrigger)
  async updateWebhookTrigger(
    @graphql.Args() args: UpdateWebhookTriggerArgs
  ): Promise<WebhookTrigger | null> {
    try {
      return await this.service.updateWebhookTrigger({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WebhookTrigger)
  async deleteWebhookTrigger(
    @graphql.Args() args: DeleteWebhookTriggerArgs
  ): Promise<WebhookTrigger | null> {
    try {
      return await this.service.deleteWebhookTrigger(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
